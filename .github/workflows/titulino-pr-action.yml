name: publish to gc buckets

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

env:
  DEV_DOMAIN_NAME: dev.titulino.com
  PROD_DOMAIN_NAME: titulino.com
  CACHE_BUCKET_NAME: github-actions-cache-162166941288
  GIT_TOKEN: ${{ secrets.TITULINO_GITHUB_TOKEN }}
  ENV_INPUT: ${{ github.event.inputs.env || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
  CI: false
  NODE_OPTIONS: "--max_old_space_size=4096"
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_BUCKET_NAME: ${{ github.ref == 'refs/heads/main' && 'titulino.com' || 'dev.titulino.com' }}

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.13.1

      # Authenticate with Google Cloud
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Install Google Cloud SDK
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Cache npm modules
      - name: Cache npm modules
        id: npm-cache
        run: |
          if gsutil -q stat gs://${CACHE_BUCKET_NAME}/cip/npm_cache.tgz; then
            echo "‚ú® üîç Cache found. Restoring from GCS..."
            gsutil cp gs://${CACHE_BUCKET_NAME}/cip/npm_cache.tgz npm_cache.tgz
            tar -xzf npm_cache.tgz
          else
            echo "No cache found. Skipping."
          fi

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Install Gulp globally
      - name: Install Gulp CLI
        run: npm install -g gulp-cli

      # Run Gulp tasks to process CSS
      - name: Run Gulp Tasks
        run: |
          gulp less
          gulp theme
          gulp less

      - name: Set & Inject Environment Variables
        run: |
          echo "REACT_APP_ENV=${ENV_INPUT}" > .env
      
          if [ "${ENV_INPUT}" = "dev" ]; then
            echo "REACT_APP_SUPABASE_BASE_API_URL=${{ secrets.SUPABASE_BASE_API_URL_DEV }}" >> .env
            echo "REACT_APP_SUPABASE_URL=${{ secrets.SUPABASE_URL_DEV }}" >> .env
            echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY_DEV }}" >> .env
            echo "REACT_APP_BACKEND_NET_SERVICE_USERNAME=${{ secrets.BACKEND_NET_SERVICE_USERNAME_DEV }}" >> .env
            echo "REACT_APP_TITULINO_NET_API=${{ secrets.TITULINO_NET_API_DEV }}" >> .env
          else
            echo "REACT_APP_SUPABASE_BASE_API_URL=${{ secrets.SUPABASE_BASE_API_URL_PROD }}" >> .env
            echo "REACT_APP_SUPABASE_URL=${{ secrets.SUPABASE_URL_PROD }}" >> .env
            echo "REACT_APP_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY_PROD }}" >> .env
            echo "REACT_APP_BACKEND_NET_SERVICE_USERNAME=${{ secrets.BACKEND_NET_SERVICE_USERNAME_PROD }}" >> .env
            echo "REACT_APP_TITULINO_NET_API=${{ secrets.TITULINO_NET_API_PROD }}" >> .env
          fi
      
          echo "‚úÖ .env file generated!"
      
      - name: Build React App
        run: |
            echo "üöß üöß Building React App..."
            # Remove any CR (carriage return) characters from the .env file (to fix line endings issues)
            sed -i 's/\r//' .env
            npm run build
            echo "‚úÖ Build completed!"     

      - name: Upload to GCS
        run: |
          echo "‚òÅÔ∏è Uploading to GCP Bucket : ${GCP_BUCKET_NAME}"

          # Ensure bucket is clean
          if gsutil -q stat gs://${GCP_BUCKET_NAME}/*; then
            echo "üßº Removing old files..."
            gsutil -m rm -r gs://${GCP_BUCKET_NAME}/*
          else
            echo "‚ú® Bucket is empty. No removal needed."
          fi

          # Upload new files
          gsutil -m rsync -r build gs://${GCP_BUCKET_NAME}

          # Set to not cache headers on critical files
          gsutil -m setmeta -h "Cache-Control: no-store, no-cache, must-revalidate, max-age=0" gs://${GCP_BUCKET_NAME}/index.html
          gsutil -m setmeta -h "Cache-Control: no-store, no-cache, must-revalidate, max-age=0" gs://${GCP_BUCKET_NAME}/service-worker.js

          # Add a content hash to service worker (optional, but better)
          SW_HASH=$(sha256sum build/service-worker.js | awk '{ print $1 }')
          gsutil cp build/service-worker.js gs://${GCP_BUCKET_NAME}/service-worker-${SW_HASH}.js

          # Ensure the app loads the correct service worker dynamically
          sed -i "s|service-worker.js|service-worker-${SW_HASH}.js|g" build/index.html
          gsutil cp build/index.html gs://${GCP_BUCKET_NAME}/index.html
