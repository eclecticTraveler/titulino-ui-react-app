name: publish to gc buckets

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

env:
  DEV_DOMAIN_NAME: dev.titulino.com
  PROD_DOMAIN_NAME: titulino.com
  CACHE_BUCKET_NAME: github-actions-cache-162166941288
  GIT_TOKEN: ${{ secrets.TITULINO_GITHUB_TOKEN }}
  ENV_INPUT: ${{ github.event.inputs.env || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
  CI: false
  NODE_OPTIONS: "--max_old_space_size=4096"
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_BUCKET_NAME: ${{ github.ref == 'refs/heads/main' && 'titulino.com' || 'dev.titulino.com' }}

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.13.1

      # Authenticate with Google Cloud
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Install Google Cloud SDK
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Cache npm modules
      - name: Cache npm modules
        id: npm-cache
        run: |
          if gsutil -q stat gs://${CACHE_BUCKET_NAME}/cip/npm_cache.tgz; then
            echo "Cache found. Restoring from GCS..."
            gsutil cp gs://${CACHE_BUCKET_NAME}/cip/npm_cache.tgz npm_cache.tgz
            tar -xzf npm_cache.tgz
          else
            echo "No cache found. Skipping."
          fi

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Install Gulp globally
      - name: Install Gulp CLI
        run: npm install -g gulp-cli

      # Run Gulp tasks to process CSS
      - name: Run Gulp Tasks
        run: |
          gulp less
          gulp theme
          gulp less

      - name: Set Environment Variables
        run: |
          echo "Using environment: ${ENV_INPUT}"
          echo "REACT_APP_ENV=${ENV_INPUT}" > .env

      - name: Build React App
        run: |
          if [ "$ENV_INPUT" = "dev" ]; then
            echo "Building for development..."
            REACT_APP_ENV=development npm run build
          else
            echo "Building for production..."
            REACT_APP_ENV=production npm run build
          fi

      - name: Prepare Service Worker Hash
        run: |
          SW_HASH=$(sha256sum build/service-worker.js | awk '{ print $1 }')
          sed -i "s|service-worker.js|service-worker-${SW_HASH}.js|g" build/index.html
          mv build/service-worker.js build/service-worker-${SW_HASH}.js

      - name: Upload to GCS
        run: |
          echo "Uploading to GCP Bucket: ${GCP_BUCKET_NAME}"

          # Ensure bucket is clean
          if gsutil -q stat gs://${GCP_BUCKET_NAME}/*; then
            echo "Removing old files..."
            gsutil -m rm -r gs://${GCP_BUCKET_NAME}/*
          else
            echo "Bucket is empty. No removal needed."
          fi

          # Upload new files
          gsutil -m rsync -r build gs://${GCP_BUCKET_NAME}

          # Set cache headers
          gsutil -m setmeta -h "Cache-Control: no-store, no-cache, must-revalidate, max-age=0" gs://${GCP_BUCKET_NAME}/index.html
          gsutil -m setmeta -h "Cache-Control: no-store, no-cache, must-revalidate, max-age=0" gs://${GCP_BUCKET_NAME}/service-worker-${SW_HASH}.js
